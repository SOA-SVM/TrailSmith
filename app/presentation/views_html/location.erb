<div class="d-flex align-items-end mt-3">
    <span class='plan_name mx-2'> A Trip to <%= hashtag[:region] %> </span>
    <span class='badge bg-info me-2'>People: <%= hashtag[:people] %></span>
    <span class='badge bg-info'>Day: <%= hashtag[:day] %></span>
</div>
<br>
<div class="d-flex col-12">
    <div class="left col-4">
        <h2>Travel Plan: </h2>
        <br>
        <% plan.spots.each_with_index do |spot, index| %>
            <div class="route-step" title="<%= spot.address %>">
                <div class="step-text">
                    <span class="step-index"><%= index + 1 %>.</span>
                    <span class="spot-name"><%= spot.name %></span>
                    <span class="spot-keyword"><%= spot.keywords %></span>
                </div>
                <% if index < plan.spots.size - 1 %>
                <div class="route-arrow d-flex align-items-center" data-index=<%= index %>>
                    <i class="fas fa-arrow-down me-2"></i> 
                    <span class="travel_mode">travel mode: <%= plan.routes[index].travel_mode %></span>
                </div>
                <% end %>
            </div>
        <% end %>
        <div class="search-container">
            <form role="form" action="/location" method="POST" id="show-spot-info">
            <div class="input-group mt-3">
                <input type="text" name="query" placeholder="Regenerate the route..." required="true" class="form-control">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
            </form>
        </div>

    </div>
    <div class="right col-8">
        <div id="map" style="width: 100%; height: 500px;">
        </div>
    </div>
</div>

<script>
    window.onload = () => {
        initMap();
    }
    function initMap() {
        const locations = <%= locations %>
        const polylines = <%= polylines %>

        const map = new google.maps.Map(document.getElementById("map"), { 
            zoom: 14,
            mapId: "DEMO_MAP_ID"
        });

        const bounds = new google.maps.LatLngBounds();

        const markers = [];
        const routes = [];
        let activeIndex = null;

        locations.forEach((location, index) => {
            const position = location['coordinate'];
            const marker = new google.maps.marker.AdvancedMarkerElement({
                position: position,
                map,
                title: location['title'],
                content: document.createElement('div'), 
            });

            marker.content.innerHTML = `
            <div style="background: #4285F4; color: white; padding: 5px; border-radius: 3px;">
                ${String.fromCharCode(65 + index)}
            </div>`;

            markers.push(marker);
            bounds.extend(position);
        });

        map.fitBounds(bounds);

        polylines.forEach((encodedPolyline, index) => {
            const polylinePath = decodePolyline(encodedPolyline);
            const routePolyline = new google.maps.Polyline({
                path: polylinePath,
                geodesic: true,
                strokeColor: "#FF0000",
                strokeOpacity: 0.5,
                strokeWeight: 2,
            });
            routePolyline.setMap(map);
            routes.push(routePolyline);
        });

        $(".route-arrow").hover(
            function () {
                const index = $(this).data("index");
                if (index !== activeIndex) {
                    routes[index].setOptions({
                        strokeOpacity: 1.0,
                        strokeWeight: 4,
                    });
                }
            },
            function () {
                const index = $(this).data("index");
                if (index !== activeIndex) {
                    routes[index].setOptions({
                        strokeOpacity: 0.5,
                        strokeWeight: 2,
                    });
                }
            }
        );

        $(".route-arrow").on("click", function (event) {
            event.stopPropagation();

            const index = $(this).data("index");

            if (activeIndex === index) {
                resetHighlight();
                return;
            }

            resetHighlight();

            // highlight rought and arrow
            $(this).addClass("highlight-arrow");
            routes[index].setOptions({
                strokeOpacity: 1.0,
                strokeWeight: 4,
            });

            activeIndex = index;
        });

        // reset highlight state
        $(document).on("click", function () {
            resetHighlight();
        });

        function resetHighlight() {
            if (activeIndex !== null) {
                $(".route-arrow").removeClass("highlight-arrow");
                routes[activeIndex].setOptions({
                    strokeOpacity: 0.5,
                    strokeWeight: 2,
                });
                activeIndex = null;
            }
        }
        

    }

    function decodePolyline(encoded) {
        let points = [];
        let index = 0, len = encoded.length;
        let lat = 0, lng = 0;

        while (index < len) {
          let b, shift = 0, result = 0;
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          let dlat = (result & 1) ? ~(result >> 1) : (result >> 1);
          lat += dlat;

          shift = 0;
          result = 0;
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          let dlng = (result & 1) ? ~(result >> 1) : (result >> 1);
          lng += dlng;

          points.push({ lat: lat / 1e5, lng: lng / 1e5 });
        }

        return points;
    }
</script>

<script src="/proxy/google_maps.js" defer></script>